generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum AuthProvider {
  GOOGLE
  FACEBOOK
  APPLE
  CREDENTIAL
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
  BLOCKED
  BANNED
  PENDING
  SUSPENDED
  DELETED
}

model User {
  id                       String                 @id @default(ulid()) @map("userId")
  name                     String?
  email                    String                 @unique
  username                 String?
  phone                    String?
  password                 String?
  avatar                   String?
  bio                      String?
  about                    String?
  address                  String?
  cover                    String?
  city                     String?
  state                    String?
  country                  String?
  zipCode                  String?
  dob                      DateTime?
  governmentID             String?
  gender                   Gender?
  lattitude                Float?
  longitude                Float?
  status                   UserStatus             @default(ACTIVE)
  averageRating            Float                  @default(0)
  isEmailVerified          Boolean                @default(false)
  isTwoFactorEnabled       Boolean                @default(false)
  isSellerVerified         Boolean                @default(false)
  blockedUntil             DateTime?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  deletedAt                DateTime?
  stripeAccountId          String? // Stripe Connect account ID
  stripeAccountStatus      String? // account status (pending, active, etc.)
  stripeOnboardingComplete Boolean                @default(false)
  stripeCustomerId         String?
  lastLoginAt              DateTime?
  loginHistory             LoginHistory[]
  accounts                 Account[]
  events                   Event[]
  bookings                 Booking[]
  reviewsGiven             Review[]               @relation("Reviewer")
  reviewReceived           Review[]               @relation("Reviewee")
  messagesReceived         Message[]              @relation("MessageReceiver")
  messagesSent             Message[]              @relation("MessageSender")
  messageRoomsSent         MessageRoom[]          @relation("MessageRoomSender")
  messageRoomsReceived     MessageRoom[]          @relation("MessageRoomReceiver")
  notifications            Notification[]
  sellerVerification       SellerVerification[]
  activityLogs             ActivityLog[]
  businessInfo             BusinessInfo?
  notificationSettings     NotificationsSettings?
  roles                    UserRoles[]
  transactionsPaid         Transaction[]          @relation("TransactionPayer")
  transactionsReceived     Transaction[]          @relation("TransactionPayee")
  transactionsApproved     Transaction[]          @relation("TransactionApprovedBy")
  blogs                    Blog[]
  interests                UserInterest[]
  withdrawalRequests       WithdrawalRequest[]    @relation("SellerWithdrawals")
  withdrawalApprovals      WithdrawalRequest[]    @relation("WithdrawalApprovals")
  feedBacks                FeedBack[]
  // Loyalty relations
  rewardPoints             RewardPoints[]
  redemptions              Redemption[]
  userLoyalty              UserLoyalty?
  tierHistories            TierHistory[]
  WishlistItem             WishlistItem[]
  tickets                  ticket[]
  reportsFiled             Report[]               @relation("ReportsFiled")
  reportsAgainst           Report[]               @relation("ReportsAgainst")
  assignedReports          Report[]               @relation("ReportAssignee")

  @@index([name])
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([createdAt])
  @@index([blockedUntil])
  @@index([isEmailVerified])
  @@index([deletedAt])
  @@index([lattitude])
  @@index([longitude])
  @@map("users")
}

model AdminBalance {
  id        String           @id @default(cuid())
  amount    Float // amount in USD
  type      AdminBalanceType // "credit" / "debit"
  reference String? // Booking ID, Transfer ID, etc
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([reference])
  @@index([type])
  @@index([createdAt])
  @@map("admin_balance")
}

enum AdminBalanceType {
  CREDIT
  DEBIT
}

//OTP For Email
model UserOtp {
  id        String    @id @default(ulid())
  type      OtpType   @default(VERIFY_EMAIL)
  email     String
  otp       String
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([email, type])
  @@index([email])
  @@index([expiresAt])
  @@index([otp])
  @@map("user_otp")
}

enum OtpType {
  EMAIL
  PHONE
  RESET_PASSWORD
  CHANGE_PASSWORD
  TWO_FACTOR
  VERIFY_EMAIL
  VERIFY_PHONE
  BOOKING
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Account {
  id                String   @id @default(ulid())
  userId            String
  type              String
  provider          String
  providerAccountId String?
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([createdAt])
  @@map("accounts")
}

model UserRoles {
  id     String @id @default(ulid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Role {
  id        String   @id @default(ulid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles       UserRoles[]
  rolePermissions RolePermission[]

  @@index([name])
  @@map("roles")
}

model Permission {
  id              String           @id @default(ulid())
  name            String           @unique
  group           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(ulid())
  roleId       String
  permissionId String

  roles       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissions Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model LoginHistory {
  id        String             @id @default(ulid())
  userId    String
  attempt   LoginHistoryStatus @default(SUCCESS)
  ip        String?
  country   String?
  userAgent String?
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("login_history")
}

enum LoginHistoryStatus {
  SUCCESS
  FAILED
  RESET_PASSWORD
  CHANGE_PASSWORD
}

model Category {
  id        String         @id @default(ulid())
  name      String         @unique
  slug      String         @unique @db.VarChar(255)
  icon      String?
  parentId  String?
  parent    Category?      @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[]     @relation("CategoryToCategory")
  blogs     Blog[]         @relation("BlogCategories")
  interests UserInterest[]
  status    CategoryStatus @default(ACTIVE)
  events    Event[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([name])
  @@index([slug])
  @@map("categorys")
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

model UserInterest {
  id         String   @id @default(ulid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@unique([userId, categoryId], name: "user_interest_unique")
  @@index([userId])
  @@map("user_interest")
}

model Event {
  id           String    @id @default(ulid())
  eventId      String    @unique
  originUrl    String?
  title        String
  description  String?
  venue        String?
  startTime    DateTime
  endTime      DateTime?
  duration     Int? // in minutes
  image        String?
  city         String?
  address      String?
  country      String?
  timezone     String?
  seatmapImage String?
  venueImage   String?
  latitude     String?
  longitude    String?
  metadata     Json?

  status       EventStatus    @default(ONGOING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sellerId     String
  seller       User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  tickets      ticket[]
  reviews      Review[]
  rooms        MessageRoom[]
  transactions Transaction[]
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id])
  WishlistItem WishlistItem[]
  EventAmenity EventAmenity[]
  Report       Report[]

  @@index([eventId])
  @@map("events")
}

enum EventStatus {
  ONGOING
  COMPLETED
  CANCELLED
  RESCHEDULED
}

model ticket {
  id           String       @id @default(ulid())
  ticketId     String
  ticketType   String?
  eventId      String
  price        Decimal      @db.Decimal(10, 2)
  discount     Decimal      @default(0) @db.Decimal(10, 2)
  discountType DiscountType @default(FIXED)
  seatDetails  String
  thumbnail    String?
  description  String?
  note         String?
  metadata     Json?
  isBooked     Boolean      @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sellerId  String
  seller    User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  bookings  Booking[]

  @@index([eventId])
  @@index([sellerId])
  @@index([seatDetails])
  @@map("tickets")
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Booking {
  id            String          @id @default(ulid()) @map("bookingId")
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  ticketId      String
  ticket        ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  price         Decimal
  discount      Decimal
  vat           Decimal
  tax           Decimal
  total         Decimal
  pickupAddress String?
  phone         String?
  email         String?
  note          String?
  alertMessage  String?
  deliveryType  DeliveryType    @default(ONLINE)
  status        BookingStatus   @default(PENDING)
  paymentMethod PaymentProvider @default(STRIPE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  deletedAt     DateTime?
  transactions  Transaction[]
  rooms         MessageRoom[]
  Report        Report[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("bookings")
}

enum DeliveryType {
  PHYSICAL_MAIL
  IN_PERSON_PICKUP
  ONLINE
}

model Transaction {
  id String @id @default(ulid())

  // Core transaction details
  type     TransactionType
  status   TransactionStatus @default(PENDING)
  amount   Decimal           @db.Decimal(10, 2)
  currency Currency          @default(USD)
  provider PaymentProvider

  // User relationships
  payer   User?   @relation("TransactionPayer", fields: [payerId], references: [id])
  payerId String? // Who initiated/paid
  payee   User?   @relation("TransactionPayee", fields: [payeeId], references: [id])
  payeeId String? // Who receives

  // Related entities
  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  // Coupon purchase relation (reverse relation)

  // Stripe Connect specific
  stripePaymentIntent String? // Stripe PaymentIntent ID
  stripeTransferId    String? // Stripe Transfer ID (for seller payouts)
  stripeAccountId     String? // Connected account ID
  stripeChargeId      String? // Stripe Charge ID

  // Commission tracking
  platformFee  Decimal? @db.Decimal(10, 2) // Admin commission
  sellerAmount Decimal? @db.Decimal(10, 2) // Amount to seller after fees

  // External references
  externalTxnId       String? // External payment provider ID
  parentTransaction   Transaction?  @relation("TransactionParent", fields: [parentTransactionId], references: [id])
  parentTransactionId String? // For refunds, payouts linked to original
  childTransactions   Transaction[] @relation("TransactionParent")

  // Metadata
  description String?
  notes       String?
  metadata    Json? // Flexible metadata storage

  // Timestamps
  processedAt DateTime?
  settledAt   DateTime? // When funds actually settled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Admin approval (for manual transactions)
  approvedBy   User?     @relation("TransactionApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt   DateTime?

  //track withdrawal status
  payoutStatus payoutStatus @default(NULL)
  Report       Report[]

  @@index([type])
  @@index([status])
  @@index([payerId])
  @@index([payeeId])
  @@index([bookingId])
  @@index([eventId])
  @@index([stripePaymentIntent])
  @@index([parentTransactionId])
  @@index([createdAt])
  @@map("transactions")
}

model Amenity {
  id          String         @id @default(ulid())
  name        String
  slug        String         @unique @db.VarChar(255)
  icon        String?
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      EventAmenity[]

  @@index([createdAt])
  @@index([name])
  @@index([slug])
  @@map("amenities")
}

model EventAmenity {
  id        String  @id @default(ulid())
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  amenityId String

  @@unique([eventId, amenityId])
  @@index([amenityId])
  @@index([eventId])
  @@map("event_amenities")
}

enum payoutStatus {
  NULL
  UNPAID
  PENDING
  PAID
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REJECTED
  CANCELLED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
  DISPUTED
}

enum PaymentProvider {
  STRIPE
  STRIPE_CONNECT
  CASH
  WALLET
}

enum TransactionType {
  // Customer transactions
  BOOKING_PAYMENT // Customer → Platform (for booking)
  COUPON_PURCHASE // Customer → Platform (for coupon)

  // Platform transactions
  SELLER_PAYOUT // Platform → Seller (earnings transfer)
  ADMIN_COMMISSION // Platform commission (tracking)

  // Refund transactions
  BOOKING_REFUND // Platform → Customer (cancelled booking)
  COUPON_REFUND // Platform → Customer (cancelled coupon)

  // Manual transactions
  MANUAL_DEPOSIT // Admin → Seller (manual credit)
  MANUAL_WITHDRAWAL // Seller → Admin (manual debit)
  ADJUSTMENT // Admin adjustments
}

enum Currency {
  USD
  EUR
  GBP
}

model Review {
  id         String       @id @default(ulid()) @map("reviewId")
  eventId    String
  event      Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  reviewer   User         @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewee   User         @relation("Reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  revieweeId String
  rating     Int          @default(0)
  title      String?
  comment    String
  status     ReviewStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  replyed    String?
  repliedAt  DateTime?

  @@index([rating])
  @@index([eventId])
  @@index([createdAt])
  @@index([reviewerId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  UNAPPROVED
  REJECTED
}

model MessageRoom {
  id         String    @id @default(ulid())
  sender     User      @relation("MessageRoomSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User      @relation("MessageRoomReceiver", fields: [receiverId], references: [id])
  receiverId String
  bookingId  String?
  booking    Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  messages   Message[]
  Event      Event?    @relation(fields: [eventId], references: [id])
  eventId    String?

  @@unique([senderId, receiverId, bookingId], name: "unique_message_room")
  @@index([createdAt])
  @@index([bookingId])
  @@index([receiverId])
  @@index([senderId])
  @@map("message_rooms")
}

model Message {
  id       String      @id @default(ulid())
  room     MessageRoom @relation(fields: [roomId], references: [id])
  roomId   String
  sender   User        @relation("MessageSender", fields: [senderId], references: [id])
  senderId String
  receiver User        @relation("MessageReceiver", fields: [receiverId], references: [id])

  receiverId String
  message    String
  attachment String?
  type       MessageType @default(TEXT)
  sentAt     DateTime    @default(now())
  isRead     Boolean     @default(false)
  Report     Report[]

  @@index([isRead])
  @@index([sentAt])
  @@index([receiverId])
  @@index([senderId])
  @@index([roomId])
  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

model Notification {
  id        String           @id @default(ulid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType @default(MESSAGE)
  title     String
  link      String?
  message   String
  image     String?
  readAt    DateTime?
  createdAt DateTime         @default(now())

  @@index([createdAt, userId])
  @@index([readAt])
  @@index([userId])
  @@map("notifications")
}

enum NotificationType {
  NOTIFY
  BOOKING
  REVIEW
  MESSAGE
  WISHLIST
  COUPON
  EVENT
  PAYMENT
  SYSTEM
  ALERT
}

model ActivityLog {
  id        String   @id @default(ulid())
  user      User?    @relation(fields: [userId], references: [id])
  type      String
  userId    String?
  action    String
  metadata  String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([userId])
  @@map("activity_log")
}

model SellerVerification {
  id         String    @id @default(ulid())
  seller     User      @relation(fields: [sellerId], references: [id])
  sellerId   String
  idDocument String
  verified   Boolean
  verifiedAt DateTime?

  @@index([verified])
  @@index([verifiedAt])
  @@index([sellerId])
  @@map("seller_verifications")
}

model BusinessInfo {
  id                 String             @id @default(ulid())
  sellerId           String             @unique
  seller             User               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  status             BusinessInfoStatus @default(PENDING)
  name               String?
  type               String?
  description        String?
  registrationNumber String?
  taxvatNumber       String?
  country            String?
  businessPhone      String?
  businessEmail      String?
  streetAddress      String?
  city               String?
  state              String?
  zipCode            String?
  address            String?
  phone              String?
  email              String?
  socialLinks        String[]           @default([])
  isVerified         Boolean            @default(false)
  documents          String[]           @default([])
  verifiedAt         DateTime?
  message            String?
  verifiedById       String?
  createdAt          DateTime           @default(now())

  @@index([verifiedAt])
  @@index([sellerId])
  @@index([createdAt])
  @@map("business_info")
}

enum BusinessInfoStatus {
  PENDING
  VERIFIED
  REJECTED
}

model NotificationsSettings {
  id                  String   @id @default(ulid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  newBooking          Boolean  @default(true)
  bookingcancellation Boolean  @default(true)
  bookingreminder     Boolean  @default(true)
  payoutintiated      Boolean  @default(true)
  payoutcompleted     Boolean  @default(true)
  newreview           Boolean  @default(true)
  eventupdate         Boolean  @default(true)
  promotionaloffer    Boolean  @default(true)
  loginnewdevice      Boolean  @default(true)
  policychange        Boolean  @default(true)
  securityalert       Boolean  @default(true)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  @@index([userId])
  @@map("notifications_settings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  EXPIRED
  REFUNDED
}

model Blog {
  id          String     @id @default(ulid())
  title       String
  slug        String     @unique @db.VarChar(255) // for SEO-friendly URLs
  content     String     @db.Text
  excerpt     String?    @db.Text // short description
  coverImage  String? // optional featured image
  status      BlogStatus @default(DRAFT) // DRAFT | PUBLISHED
  tags        String[]   @default([]) // array of tags
  publishedAt DateTime? // only set when published
  isFeatured  Boolean    @default(false) // used for homepage
  isDeleted   Boolean    @default(false)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  categories Category[] @relation("BlogCategories")

  seo   SeoMetadata? @relation("BlogToSeoMetadata", fields: [seoId], references: [id])
  seoId String?      @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  faq       HelpFaq[]

  @@index([isFeatured])
  @@index([isDeleted])
  @@index([status])
  @@index([slug])
  @@index([authorId])
  @@index([publishedAt])
  @@index([createdAt])
  @@map("blog")
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

model WithdrawalRequest {
  id          String                  @id @default(ulid())
  sellerId    String
  seller      User                    @relation("SellerWithdrawals", fields: [sellerId], references: [id])
  amount      Decimal                 @db.Decimal(10, 2)
  currency    Currency                @default(USD)
  description String?
  status      WithdrawalRequestStatus @default(PENDING)
  requestedAt DateTime                @default(now())
  processedAt DateTime?
  adminNotes  String?

  // Admin approval
  approvedBy   User?     @relation("WithdrawalApprovals", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt   DateTime?

  // Stripe transfer tracking
  stripeTransferId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId])
  @@index([status])
  @@index([requestedAt])
  @@index([createdAt])
  @@map("withdrawal_requests")
}

enum WithdrawalRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

model HelpFaq {
  id        String        @id @default(ulid())
  question  String
  answer    String
  blog      Blog?         @relation(fields: [blogId], references: [id])
  blogId    String?
  type      HelpType      @default(OTHER)
  status    HelpFaqStatus @default(PUBLISHED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  // Link back to settings.faq relation

  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([question])
  @@index([answer])
  @@index([type])
  @@index([deletedAt])
  @@map("helpfaqs")
}

enum HelpFaqStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
  QUESTIONS
}

enum HelpType {
  BOOKING
  PAYMENT
  EVENT
  ACCOUNT
  COUPON
  REVIEW
  MESSAGE
  NOTIFICATION
  SYSTEM
  GENERAL
  SELLER
  USER
  OTHER
}

model FeedBack {
  id        String       @id @default(ulid())
  email     String
  name      String
  message   String
  userId    String?
  platform  PlatformType @default(WEB)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("feedback")
}

enum PlatformType {
  WEB
  ANDROID
  IOS
}

/// Track Stripe webhook events for idempotency and auditing
enum WebhookEventStatus {
  PENDING
  PROCESSED
  FAILED
}

model WebhookEvent {
  id            String             @id @default(ulid())
  stripeEventId String             @unique
  type          String
  status        WebhookEventStatus @default(PENDING)
  firstSeenAt   DateTime           @default(now())
  processedAt   DateTime?
  error         String?
  payload       Json?

  @@index([status])
  @@index([firstSeenAt])
}

// Sitemap change frequency for SEO
enum ChangeFrequency {
  ALWAYS
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  NEVER
}

model heroSection {
  id          String   @id @default(ulid())
  title       String
  description String?
  sortName    String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
  @@map("hero_section")
}

model banner {
  id          String   @id @default(ulid())
  title       String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
}

model card {
  id          String   @id @default(ulid())
  title       String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        CardType @default(FEATURED)

  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
}

enum CardType {
  FEATURED
  TRENDING
  NEW
  POPULAR
  RECOMMENDED
}

model settings {
  id              String   @id @default(ulid())
  siteName        String
  siteUrl         String
  siteLogo        String?
  siteFavicon     String?
  siteDescription String?
  siteKeywords    String?
  siteEmail       String?
  sitePhone       String?
  siteAddress     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

model contactinformation {
  id               String   @id @default(ulid())
  email            String
  secondaryEmail   String?
  phone            String
  phoneMessage     String?
  secondaryPhone   String?
  address          String?
  secondaryAddress String?
  businessHours    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model testimonial {
  id          String   @id @default(ulid())
  name        String
  badgeTitle  String?
  designation String?
  image       String?
  title       String?
  description String?
  position    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([createdAt])
  @@index([updatedAt])
}

model dynamicPage {
  id          String      @id @default(ulid())
  title       String
  slug        String      @unique @db.VarChar(255) // for SEO-friendly URLs
  description String?
  image       String?
  content     String?     @db.Text
  seo         SeoMetadata @relation("DynamicPageToSeoMetadata", fields: [seoId], references: [id])
  seoId       String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

model SeoMetadata {
  id          String       @id @default(ulid())
  metaTitle   String
  dynamicPage dynamicPage? @relation("DynamicPageToSeoMetadata")
  blog        Blog?        @relation("BlogToSeoMetadata")

  metaDescription String?
  metaKeywords    String?
  // Robots directives
  robotsIndex     Boolean @default(true) // noindex if false
  robotsFollow    Boolean @default(true) // nofollow if false
  // Open Graph
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  ogType          String? // website, article, etc.
  ogSiteName      String?

  structuredData Json? // JSON-LD schema.org
  // Sitemap
  changefreq     ChangeFrequency?
  priority       Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==================== Loyalty Program ====================

enum PointRuleAction {
  BOOKING
  SIGNUP
  REFERRAL_SIGNUP
  REFERRAL_PURCHASE
  REVIEW_SUBMITTED
  BIRTHDAY_BONUS
  MANUAL_ADJUSTMENT
  LOGIN_STREAK
  SOCIAL_SHARE
}

model LoyaltyTier {
  id            String        @id @default(cuid())
  name          String        @unique
  priority      Int
  minPoints     Int
  durationDays  Int
  benefits      Json?
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // back-relation
  userLoyalties UserLoyalty[]

  @@index([priority])
}

model PointRule {
  id              String          @id @default(cuid())
  action          PointRuleAction
  name            String
  basePoints      Int             @default(0)
  perUnit         Boolean         @default(false)
  unitAmount      Int?
  tierMultipliers Json?
  expiryMonths    Int             @default(12)
  active          Boolean         @default(true)
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  // back-relation
  rewards         RewardPoints[]

  @@index([action, active])
}

model RewardPoints {
  id           String            @id @default(cuid())
  userId       String
  user         User              @relation(fields: [userId], references: [id])
  ruleId       String?
  rule         PointRule?        @relation(fields: [ruleId], references: [id])
  action       PointRuleAction
  points       Int
  remaining    Int
  status       RewardPointStatus @default(ACTIVE)
  reason       String?
  earnedAt     DateTime          @default(now())
  expiresAt    DateTime?
  referencedId String?
  createdAt    DateTime          @default(now())

  @@index([userId, status])
  @@index([expiresAt])
}

enum RewardPointStatus {
  ACTIVE
  REDEEMED
  EXPIRED
  ADJUSTED
}

model Redemption {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  points     Int
  rewardCode String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([userId, createdAt])
}

model UserLoyalty {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id])
  tierId        String?
  tier          LoyaltyTier? @relation(fields: [tierId], references: [id])
  currentPoints Int          @default(0)
  totalEarned   Int          @default(0)
  totalRedeemed Int          @default(0)
  updatedAt     DateTime     @updatedAt
}

model TierHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  oldTierId String?
  newTierId String?
  reason    String?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model ScheduledJobLog {
  id      String   @id @default(cuid())
  name    String
  runAt   DateTime @default(now())
  status  String
  payload Json?
}

model WishlistItem {
  id        String   @id @default(ulid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId], name: "unique_wishlist_item")
  @@index([userId])
  @@index([eventId])
  @@index([createdAt])
  @@map("wishlist_items")
}

enum ReportTargetType {
  USER
  BOOKING
  EVENT
  TRANSACTION
  MESSAGE
  OTHER
}

// The nature of the report
enum ReportType {
  FRAUD
  SCAM
  SPAM
  ABUSE
  PAYMENT_ISSUE
  BOOKING_ISSUE
  EVENT_ISSUE
  PLATFORM_BUG
  OTHER
}

// Lifecycle status for moderation
enum ReportStatus {
  PENDING
  IN_REVIEW
  ESCALATED
  RESOLVED
  REJECTED
}

// Optional severity to prioritize queues
enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Report {
  id         String @id @default(ulid())
  // Who filed the report (user or seller; both are User with different roles)
  reporterId String
  reporter   User   @relation("ReportsFiled", fields: [reporterId], references: [id], onDelete: Cascade)

  // Who/what is being reported
  reportedUserId String?
  reportedUser   User?   @relation("ReportsAgainst", fields: [reportedUserId], references: [id], onDelete: SetNull)

  targetType ReportTargetType @default(OTHER)

  // Optional targets to pin the report to a specific resource
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  messageId String?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)

  // Classification & content
  type        ReportType     @default(OTHER)
  severity    ReportSeverity @default(MEDIUM)
  subject     String?
  description String?        @db.Text
  attachments String[]       @default([]) // optional evidence (URLs)
  metadata    Json?

  // Moderation workflow
  status       ReportStatus @default(PENDING)
  assignedToId String?
  assignedTo   User?        @relation("ReportAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedAt   DateTime?
  adminNotes   String?      @db.Text
  resolvedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([type])
  @@index([targetType])
  @@index([reporterId])
  @@index([reportedUserId])
  @@index([bookingId])
  @@index([eventId])
  @@index([transactionId])
  @@index([messageId])
  @@index([createdAt])
  @@map("reports")
}
